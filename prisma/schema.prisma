datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- NEW MODEL ---
model Organization {
  id          String    @id @default(cuid())
  name        String
  inviteCode  String    @unique @default(cuid())
  users       User[]
  aiAssets    AIAsset[]
  vendors     Vendor[]
  templates   AssessmentTemplate[]
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  auditLogs     AuditLog[]
  role          Role         @default(MEMBER)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  notifications  Notification[]
}

model AIAsset {
  id                 String       @id @default(cuid())
  discoveredId       String?      @unique
  name               String
  owner              String
  businessPurpose    String
  status             AssetStatus  @default(Proposed)
  riskClassification RiskLevel    @default(Low)
  dateRegistered     DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  vendorId           String?
  vendor             Vendor?      @relation(fields: [vendorId], references: [id])
  assessments        Assessment[]
  auditLogs          AuditLog[]
  // --- ADDED: Link AIAsset to an Organization ---
  organizationId     String
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Vendor {
  id        String       @id @default(cuid())
  name      String
  website   String
  status    VendorStatus @default(Active)
  aiAssets  AIAsset[]
  // --- ADDED: Link Vendor to an Organization ---
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  // --- ADDED: Make vendor names unique within an organization ---
  @@unique([name, organizationId])
}

model AssessmentTemplate {
  id        String @id @default(cuid())
  name      String
  description  String
  questions Json
  createdAt DateTime @default(now())
  // --- ADDED: Link Template to an Organization ---
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  // --- ADDED: Make template names unique within an organization ---
  @@unique([name, organizationId])
}

model Assessment {
  id        String           @id @default(cuid())
  name      String
  status    AssessmentStatus @default(NotStarted)
  questions Json
  calculatedRiskScore Int?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  assetId   String
  asset     AIAsset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String     @id @default(cuid())
  action    ActionType
  details   String
  createdAt DateTime   @default(now())
  assetId   String?
  asset     AIAsset?   @relation(fields: [assetId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// --- ENUMS ---
// --- CORRECTED SYNTAX ---
enum VendorStatus {
  Active
  InReview
  Terminated
}
enum AssetStatus {
  Proposed
  InReview
  Active
  Retired
}
enum RiskLevel {
  Low
  Medium
  High
  Severe
}
enum AssessmentStatus {
  NotStarted
  InProgress
  Completed
  Archived
}
enum ActionType {
  ASSET_CREATED
  ASSET_UPDATED
  ASSET_DELETED
  ASSESSMENT_STARTED
  ASSESSMENT_UPDATED
  ASSESSMENT_COMPLETED
  VENDOR_CREATED
  VENDOR_LINKED_TO_ASSET
  AUTO_DISCOVERY_COMPLETED
}

enum Role {
  ADMIN   // Can manage users, settings, and billing
  MEMBER  // Can view and create assets, complete assigned assessments
}

model Notification {
id        String   @id @default(cuid())
message   String
isRead    Boolean  @default(false)
createdAt DateTime @default(now())

userId    String
user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

// Optional link to an asset to make notifications clickable
assetId   String?
}