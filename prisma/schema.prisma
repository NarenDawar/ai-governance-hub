datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model AIAsset {
  id                 String       @id @default(cuid())
  // --- NEW: A unique ID from the source system (e.g., AWS ARN) ---
  discoveredId       String?      @unique
  // -----------------------------------------------------------------
  name               String
  owner              String
  businessPurpose    String
  status             AssetStatus  @default(Proposed)
  riskClassification RiskLevel    @default(Low)
  dateRegistered     DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  vendorId           String?
  vendor             Vendor?      @relation(fields: [vendorId], references: [id])
  assessments        Assessment[]
  auditLogs          AuditLog[]
}

// ... all other models and enums remain the same ...

model Vendor {
  id        String     @id @default(cuid())
  name      String     @unique
  website   String
  assets    AIAsset[]
}

model Assessment {
  id        String           @id @default(cuid())
  name      String
  status    AssessmentStatus @default(NotStarted)
  questions Json
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  assetId   String
  asset     AIAsset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String     @id @default(cuid())
  action    ActionType
  details   String
  createdAt DateTime   @default(now())
  assetId   String?
  asset     AIAsset?   @relation(fields: [assetId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
}

// --- AUTHENTICATION MODELS REQUIRED BY NEXT-AUTH ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  auditLogs     AuditLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- ENUMS ---
enum AssetStatus {
  Proposed
  InReview
  Active
  Retired
}

enum RiskLevel {
  Low
  Medium
  High
  Severe
}

enum AssessmentStatus {
  NotStarted
  InProgress
  Completed
  Archived
}

enum ActionType {
  ASSET_CREATED
  ASSET_UPDATED
  ASSESSMENT_STARTED
  ASSESSMENT_UPDATED
  ASSESSMENT_COMPLETED
  VENDOR_CREATED
  VENDOR_LINKED_TO_ASSET
  AUTO_DISCOVERY_COMPLETED
}



