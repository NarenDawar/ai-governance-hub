// datasource db defines the database connection details.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator client specifies that we want to generate Prisma Client.
generator client {
  provider = "prisma-client-js"
}

// Enum for the risk classification of an AI Asset
enum RiskLevel {
  Low
  Medium
  High
  Severe
}

// Enum for the lifecycle status of an AI Asset
enum AssetStatus {
  Proposed
  InReview
  Active
  Retired
}

// Enum for the status of a risk assessment
enum AssessmentStatus {
  NotStarted
  InProgress
  Completed
  Archived
}

// The core model for an AI Asset
model AIAsset {
  id                 String       @id @default(cuid())
  name               String
  owner              String
  businessPurpose    String
  status             AssetStatus  @default(Proposed)
  riskClassification RiskLevel
  dateRegistered     DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  assessments        Assessment[]

  // --- NEW VENDOR RELATIONSHIP ---
  // An AI Asset can optionally be linked to one Vendor.
  vendorId           String?
  vendor             Vendor?      @relation(fields: [vendorId], references: [id])
  // -----------------------------
}

// NEW: The model for a third-party AI Vendor
model Vendor {
  id        String    @id @default(cuid())
  name      String    @unique
  website   String
  status    String    @default("Active") // e.g., Active, In Review, Denied
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  assets    AIAsset[] // A Vendor can be associated with many AI Assets
}

// The model for a single Risk Assessment
model Assessment {
  id        String           @id @default(cuid())
  name      String
  status    AssessmentStatus @default(NotStarted)
  questions Json // The questionnaire structure and answers
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  assetId   String
  asset     AIAsset          @relation(fields: [assetId], references: [id])
}

